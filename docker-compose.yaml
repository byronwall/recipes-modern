services:
  web-app:
    build: .
    profiles: ["prod"]
    ports:
      - "3000"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      S3_ENDPOINT_PUBLIC: ${S3_ENDPOINT_PUBLIC}
      S3_ENDPOINT_INTERNAL: ${S3_ENDPOINT_INTERNAL}
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}

  web-app-dev:
    image: node:20
    working_dir: /app
    profiles: ["dev"]
    ports:
      - "3000:3000"
    depends_on:
      - db
      - minio
      - minio-init
    env_file:
      - .env
    environment:
      NODE_ENV: development
      HOT_RELOAD: ${HOT_RELOAD:-true}
      WATCHPACK_POLLING: ${HOT_RELOAD:-true}
      CHOKIDAR_USEPOLLING: ${HOT_RELOAD:-true}
      CHOKIDAR_INTERVAL: ${CHOKIDAR_INTERVAL:-300}
      # Ensure Next.js listens on all interfaces inside the container
      HOSTNAME: 0.0.0.0
      # Ensure the app connects to the db service hostname
      DB_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    volumes:
      - ./:/app:delegated
      - /app/node_modules
      - /app/.next
    command: sh -c "npm ci && npx prisma generate && npm run dev -- -p 3000 -H 0.0.0.0"

  db:
    image: postgres:13
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -h localhost"]
      interval: 5s
      timeout: 3s
      retries: 30

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 60
    ports:
      - "9000:9000"
      - "9001:9001"

  minio-init:
    image: bitnami/minio-client:latest
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./ops/minio-init.sh:/usr/local/bin/minio-init.sh:ro
    # exec-form; no Compose interpolation; ENTRYPOINT contains shell, so this is fine
    command: ["/bin/sh", "-ceu", ". /usr/local/bin/minio-init.sh"]
    environment:
      # Coolify must supply these (recommended to set in its UI)
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      APP_URL: ${APP_URL}
      APP_ORIGINS: ${APP_URL}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-}
      CORS_MAX_AGE: ${CORS_MAX_AGE:-}
    restart: "no"

volumes:
  db-data:
  minio-data:
