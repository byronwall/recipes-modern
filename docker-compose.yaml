services:
  web-app:
    build: .
    profiles: ["prod"]
    ports:
      - "3000"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # Public/media host and path for Traefik-based same-origin media
      APP_HOST: ${APP_HOST}
      MEDIA_PATH_PREFIX: ${MEDIA_PATH_PREFIX:-/media}
      PUBLIC_SCHEME: ${PUBLIC_SCHEME:-https}
      # Derived public endpoints for SDK and Next Image
      # IMPORTANT: Do NOT include MEDIA_PATH_PREFIX here; signatures must be for the path MinIO sees
      S3_ENDPOINT_PUBLIC: ${PUBLIC_SCHEME:-https}://${APP_HOST}
      NEXT_PUBLIC_MEDIA_BASE_URL: ${PUBLIC_SCHEME:-https}://${APP_HOST}${MEDIA_PATH_PREFIX}/${S3_BUCKET}
      S3_ENDPOINT_INTERNAL: ${S3_ENDPOINT_INTERNAL}
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      APP_ORIGINS: ${APP_ORIGINS:-http://localhost:3000}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-GET,PUT}
      CORS_MAX_AGE: ${CORS_MAX_AGE:-3600}
      S3_PUBLIC_READ: ${S3_PUBLIC_READ:-true}
    command: >
      sh -ceu '
        node ./scripts/init-bucket.js;
        exec npm run start
      '
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.gzip.compress=true
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.http-0-r8c8c8kwscwwo804c48oswgo.entryPoints=${TRAEFIK_ENTRYPOINT:-https}
      - traefik.http.routers.http-0-r8c8c8kwscwwo804c48oswgo.middlewares=redirect-to-https
      - "traefik.http.routers.http-0-r8c8c8kwscwwo804c48oswgo.rule=Host(`${APP_HOST}`) && PathPrefix(`/`)"
      - traefik.http.routers.https-0-r8c8c8kwscwwo804c48oswgo.entryPoints=${TRAEFIK_ENTRYPOINT:-https}
      - traefik.http.routers.https-0-r8c8c8kwscwwo804c48oswgo.middlewares=gzip
      - "traefik.http.routers.https-0-r8c8c8kwscwwo804c48oswgo.rule=Host(`${APP_HOST}`) && PathPrefix(`/`)"
      - traefik.http.routers.https-0-r8c8c8kwscwwo804c48oswgo.tls.certresolver=${TRAEFIK_CERTRESOLVER:-letsencrypt}
      - traefik.http.routers.https-0-r8c8c8kwscwwo804c48oswgo.tls=${TRAEFIK_TLS:-true}
      - traefik.http.services.https-0-r8c8c8kwscwwo804c48oswgo.loadbalancer.server.port=3000

  web-app-dev:
    image: node:20
    working_dir: /app
    profiles: ["dev"]
    ports:
      - "3000:3000"
    depends_on:
      - db
      - minio
    env_file:
      - .env
    environment:
      # Local Traefik defaults
      APP_HOST: ${APP_HOST:-recipes.localhost}
      MEDIA_PATH_PREFIX: ${MEDIA_PATH_PREFIX:-/media}
      PUBLIC_SCHEME: ${PUBLIC_SCHEME:-http}
      TRAEFIK_ENTRYPOINT: ${TRAEFIK_ENTRYPOINT:-web}
      TRAEFIK_TLS: ${TRAEFIK_TLS:-false}
      # Derived public endpoints
      # IMPORTANT: Do NOT include MEDIA_PATH_PREFIX here; signatures must be for the path MinIO sees
      S3_ENDPOINT_PUBLIC: ${PUBLIC_SCHEME:-http}://${APP_HOST}
      NEXT_PUBLIC_MEDIA_BASE_URL: ${PUBLIC_SCHEME:-http}://${APP_HOST}${MEDIA_PATH_PREFIX}/${S3_BUCKET}
      NODE_ENV: development
      HOT_RELOAD: ${HOT_RELOAD:-true}
      WATCHPACK_POLLING: ${HOT_RELOAD:-true}
      CHOKIDAR_USEPOLLING: ${HOT_RELOAD:-true}
      CHOKIDAR_INTERVAL: ${CHOKIDAR_INTERVAL:-300}
      # Ensure Next.js listens on all interfaces inside the container
      HOSTNAME: 0.0.0.0
      # Ensure the app connects to the db service hostname
      DB_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    volumes:
      - ./:/app:delegated
      - /app/node_modules
      - /app/.next
    command: sh -c "npm ci && npx prisma generate && npm run init-bucket && npm run dev -- -p 3000 -H 0.0.0.0"
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.gzip.compress=true
      - traefik.http.routers.app-dev.entryPoints=${TRAEFIK_ENTRYPOINT:-web}
      - "traefik.http.routers.app-dev.rule=Host(`${APP_HOST}`) && PathPrefix(`/`)"
      - traefik.http.services.app-dev.loadbalancer.server.port=3000

  db:
    image: postgres:13
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -h localhost"]
      interval: 5s
      timeout: 3s
      retries: 30

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 60
    ports:
      - "9000:9000"
      - "9001:9001"
    labels:
      - traefik.enable=true
      # Strip /media prefix when proxying to MinIO
      - "traefik.http.middlewares.strip-media.stripprefix.prefixes=${MEDIA_PATH_PREFIX:-/media}"
      # Optional gzip
      - traefik.http.middlewares.media-gzip.compress=true
      # Route https://recipes.byroni.us/media/* to MinIO API (9000)
      - traefik.http.routers.minio-media.entryPoints=${TRAEFIK_ENTRYPOINT:-https}
      - "traefik.http.routers.minio-media.rule=Host(`${APP_HOST}`) && PathPrefix(`${MEDIA_PATH_PREFIX:-/media}`)"
      - traefik.http.routers.minio-media.tls=${TRAEFIK_TLS:-true}
      - traefik.http.routers.minio-media.tls.certresolver=${TRAEFIK_CERTRESOLVER:-letsencrypt}
      - traefik.http.routers.minio-media.middlewares=strip-media,media-gzip
      - traefik.http.services.minio-api.loadbalancer.server.port=9000

  traefik:
    image: traefik:v2.11
    profiles: ["dev"]
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  db-data:
  minio-data:
