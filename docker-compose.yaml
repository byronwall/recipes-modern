version: "3.8"

services:
  web-app:
    build: .
    profiles: ["prod"]
    ports:
      - "3000"
    depends_on:
      - db
      - minio
      - minio-init
    env_file:
      - .env
    environment:
      S3_ENDPOINT_PUBLIC: ${S3_ENDPOINT_PUBLIC}
      S3_ENDPOINT_INTERNAL: ${S3_ENDPOINT_INTERNAL}
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}

  web-app-dev:
    image: node:20
    working_dir: /app
    profiles: ["dev"]
    ports:
      - "3000:3000"
    depends_on:
      - db
      - minio
      - minio-init
    env_file:
      - .env
    environment:
      NODE_ENV: development
      HOT_RELOAD: ${HOT_RELOAD:-true}
      WATCHPACK_POLLING: ${HOT_RELOAD:-true}
      CHOKIDAR_USEPOLLING: ${HOT_RELOAD:-true}
      CHOKIDAR_INTERVAL: ${CHOKIDAR_INTERVAL:-300}
      # Ensure Next.js listens on all interfaces inside the container
      HOSTNAME: 0.0.0.0
      # Ensure the app connects to the db service hostname
      DB_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    volumes:
      - ./:/app:delegated
      - /app/node_modules
      - /app/.next
    command: sh -c "npm ci && npx prisma generate && npm run dev -- -p 3000 -H 0.0.0.0"

  db:
    image: postgres:13
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - db-data:/var/lib/postgresql/data

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 20
    ports:
      - "9000:9000"
      - "9001:9001"

  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}
      APP_ORIGINS: ${APP_URL}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS}

    command: |
      set -eu
      echo "Configuring MinIO (bucket, policy, CORS)"
      mc alias set local http://minio:9000 "$$MINIO_ROOT_USER" "$$MINIO_ROOT_PASSWORD"
      if ! mc ls local/"$$S3_BUCKET" >/dev/null 2>&1; then
        mc mb --ignore-existing local/"$$S3_BUCKET"
      fi
      # Public read (download). Change to 'none' for private buckets.
      mc anonymous set download local/"$$S3_BUCKET"

      # Build CORS JSON from env vars without external tools
      APP_ORIGINS_VAL="$$APP_ORIGINS"
      METHODS_VAL="GET,PUT"
      MAX_AGE_VAL=3600

      ORIGINS_JSON="["
      OIFS="$$IFS"; IFS=','
      set -- $$APP_ORIGINS_VAL
      for origin in "$$@"; do
        # trim leading/trailing whitespace using parameter expansion
        origin="$$origin"
        origin="$${origin#"$${origin%%[![:space:]]*}"}"
        origin="$${origin%"$${origin##*[![:space:]]}"}"
        [ -z "$$origin" ] && continue
        if [ "$$ORIGINS_JSON" != "[" ]; then ORIGINS_JSON="$$ORIGINS_JSON,"; fi
        ORIGINS_JSON="$$ORIGINS_JSON\"$$origin\""
      done
      IFS="$$OIFS"
      ORIGINS_JSON="$$ORIGINS_JSON]"

      METHODS_JSON="["
      OIFS2="$$IFS"; IFS=','
      set -- $$METHODS_VAL
      for m in "$$@"; do
        m="$$m"
        m="$${m#"$${m%%[![:space:]]*}"}"
        m="$${m%"$${m##*[![:space:]]}"}"
        [ -z "$$m" ] && continue
        if [ "$$METHODS_JSON" != "[" ]; then METHODS_JSON="$$METHODS_JSON,"; fi
        METHODS_JSON="$$METHODS_JSON\"$$m\""
      done
      IFS="$$OIFS2"
      METHODS_JSON="$$METHODS_JSON]"

      cat > /tmp/cors.effective.json <<EOF
      [
        {
          "AllowedHeaders": ["*"],
          "AllowedMethods": $$METHODS_JSON,
          "AllowedOrigins": $$ORIGINS_JSON,
          "ExposeHeaders": ["ETag"],
          "MaxAgeSeconds": $$MAX_AGE_VAL
        }
      ]
      EOF

      mc cors set local/"$$S3_BUCKET" /tmp/cors.effective.json

volumes:
  db-data:
  minio-data:
