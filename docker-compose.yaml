x-common-env: &common-env
  APP_HOST: ${APP_HOST}
  PUBLIC_SCHEME: ${PUBLIC_SCHEME:-https}
  MEDIA_PATH_PREFIX: ${MEDIA_PATH_PREFIX:-/media}
  S3_ENDPOINT_INTERNAL: ${S3_ENDPOINT_INTERNAL:-http://minio:9000}
  S3_REGION: ${S3_REGION:-us-east-1}
  S3_BUCKET: ${S3_BUCKET:-recipes-media}
  S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID:-minioadmin}
  S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY:-minioadmin}
  S3_PUBLIC_READ: ${S3_PUBLIC_READ:-true}
  DB_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
  KROGER_CLIENT_ID: ${KROGER_CLIENT_ID}
  KROGER_CLIENT_SECRET: ${KROGER_CLIENT_SECRET}
  OPENAI_API_KEY: ${OPENAI_API_KEY}
  NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
  HOST: 0.0.0.0

  # TODO: need to figure out how to get Coolify past "in progress" - reduce scope of compose until matches the old one?
  # TODO: consider stopping things and pruning out old containers?

services:
  web-app:
    build: .
    profiles: ["prod"]
    ports:
      - "3000:3000"
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
    #   interval: 10s
    #   timeout: 3s
    #   retries: 10
    depends_on:
      - db
        # condition: service_healthy
      # - minio
      # condition: service_healthy
    env_file:
      - .env
    environment:
      <<: *common-env

    labels:
      - "traefik.enable=true"

      # Middlewares
      - "traefik.http.middlewares.gzip.compress=true"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # Routers
      - "traefik.http.routers.app-http.entryPoints=http"
      - "traefik.http.routers.app-http.rule=Host(`${APP_HOST}`) && PathPrefix(`/`)"
      - "traefik.http.routers.app-http.middlewares=redirect-to-https"
      - "traefik.http.routers.app-http.service=app-svc"

      - "traefik.http.routers.app-https.entryPoints=https"
      - "traefik.http.routers.app-https.rule=Host(`${APP_HOST}`) && PathPrefix(`/`)"
      - "traefik.http.routers.app-https.middlewares=gzip"
      - "traefik.http.routers.app-https.service=app-svc"
      - "traefik.http.routers.app-https.tls=true"
      - "traefik.http.routers.app-https.tls.certresolver=letsencrypt"
      - "traefik.http.routers.app-https.priority=10"

      # Service
      - "traefik.http.services.app-svc.loadbalancer.server.port=3000"
  # web-app-dev:
  #   image: node:20
  #   working_dir: /app
  #   profiles: ["dev"]
  #   ports:
  #     - "3000"
  #   depends_on:
  #     - db
  #     # - minio
  #   env_file:
  #     - .env
  #   environment:
  #     <<: *common-env
  #     PUBLIC_SCHEME: ${PUBLIC_SCHEME:-http}
  #     NODE_ENV: development
  #     HOT_RELOAD: ${HOT_RELOAD:-true}
  #     WATCHPACK_POLLING: ${HOT_RELOAD:-true}
  #     CHOKIDAR_USEPOLLING: ${HOT_RELOAD:-true}
  #     CHOKIDAR_INTERVAL: ${CHOKIDAR_INTERVAL:-300}

  #   volumes:
  #     - ./:/app:delegated
  #     - /app/node_modules
  #     - /app/.next
  #   command: sh -c "npm ci && npx prisma generate && npm run init-bucket && npm run dev -- -p 3000 -H 0.0.0.0"
  #   labels:
  #     - traefik.enable=true

  #     # Middleware (reuse gzip if you want)
  #     - traefik.http.middlewares.gzip.compress=true

  #     # Router
  #     - traefik.http.routers.app-dev.entryPoints=http
  #     - traefik.http.routers.app-dev.rule=Host(`${APP_HOST}`) && PathPrefix(`/`)
  #     - traefik.http.routers.app-dev.service=app-dev-svc
  #     - traefik.http.routers.app-dev.priority=10

  #     # Service
  #     - traefik.http.services.app-dev-svc.loadbalancer.server.port=3000

  db:
    image: postgres:13
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db-data:/var/lib/postgresql/data
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -h localhost"]
    #   interval: 5s
    #   timeout: 3s
    #   retries: 30

  # minio:
  #   image: minio/minio:latest
  #   command: server /data --console-address ":9001"
  #   environment:
  #     MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID:-minioadmin}
  #     MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY:-minioadmin}
  #   volumes:
  #     - minio-data:/data
  #   # healthcheck:
  #   #   test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
  #   #   interval: 5s
  #   #   timeout: 3s
  #   #   retries: 60
  #   ports:
  #     - "9000"
  #     - "9001"
  #   labels:
  #     - "traefik.enable=true"

  #     # Middlewares
  #     - "traefik.http.middlewares.strip-media.stripprefix.prefixes=${MEDIA_PATH_PREFIX:-/media}"
  #     - "traefik.http.middlewares.media-gzip.compress=true"

  #     # Router
  #     - "traefik.http.routers.media-https.entryPoints=${TRAEFIK_MINIO_ENTRYPOINTS:-https}"
  #     - "traefik.http.routers.media-https.rule=Host(`${APP_HOST}`) && PathPrefix(`${MEDIA_PATH_PREFIX:-/media}`)"
  #     - "traefik.http.routers.media-https.middlewares=strip-media,media-gzip"
  #     - "traefik.http.routers.media-https.service=media-svc"
  #     # if minio is served over http, these two vars (TLS and entrypoints) need to be removed
  #     - "traefik.http.routers.media-https.tls=${TRAEFIK_MINIO_TLS:-true}"
  #     - "traefik.http.routers.media-https.priority=100"

  #     # Service
  #     - "traefik.http.services.media-svc.loadbalancer.server.port=9000"

  # traefik:
  #   image: traefik:v2.11
  #   profiles: ["dev"]
  #   command:
  #     - --api.insecure=true
  #     - --providers.docker=true
  #     - --providers.docker.exposedbydefault=false
  #     - --entrypoints.http.address=:80
  #   ports:
  #     - "80:80"
  #     - "8080:8080"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  db-data:
  minio-data:
