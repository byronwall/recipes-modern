// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model UserExtras {
    id Int @id @default(autoincrement())

    // User relation - unique
    userId String @unique
    User   User   @relation(fields: [userId], references: [id])

    // kroger API
    krogerUserAccessToken  String
    krogerUserRefreshToken String
}

model Recipe {
    id               Int               @id @default(autoincrement())
    name             String
    description      String
    ingredientGroups IngredientGroup[]
    stepGroups       StepGroup[]

    PlannedMeal  PlannedMeal[]
    ShoppingList ShoppingList[]

    userId String
    User   User   @relation(fields: [userId], references: [id])
}

model IngredientGroup {
    id Int @id @default(autoincrement())

    title String
    order Int

    ingredients Ingredient[]

    recipeId Int
    Recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Ingredient {
    id Int @id @default(autoincrement())

    rawInput String @default("")

    ingredient String
    amount     String @default("")
    modifier   String @default("")
    unit       String @default("")

    plu        String   @default("")
    isGoodName Boolean? @default(false)
    aisle      String?
    comments   String?

    // link to recipes
    group   IngredientGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId Int

    ShoppingList ShoppingList[]
}

model StepGroup {
    id Int @id @default(autoincrement())

    title String
    order Int

    // ordered steps for the group
    steps String[]

    recipeId Int
    Recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model PlannedMeal {
    id Int @id @default(autoincrement())

    date DateTime

    isMade           Boolean @default(false)
    isOnShoppingList Boolean @default(false)
    scale            Int     @default(1)

    recipeId Int
    Recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    // link to user
    userId String
    User   User   @relation(fields: [userId], references: [id])
}

model ShoppingList {
    id Int @id @default(autoincrement())

    isBought Boolean? @default(false)

    // linked recipe
    recipeId Int?
    Recipe   Recipe? @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    // ingredient link
    ingredientId Int?
    ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])

    // loose item
    looseItem String?

    // link to user
    userId String
    User   User   @relation(fields: [userId], references: [id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // password auth
    password String?

    // non-auth related
    UserExtras   UserExtras[]
    Recipe       Recipe[]
    PlannedMeal  PlannedMeal[]
    ShoppingList ShoppingList[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
